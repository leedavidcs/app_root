// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerified   Boolean  @default(false)
  password        String
  username        String   @unique
  timezone        String   @default("America/Los_Angeles")
  balance         Balance
  stripeDetails   StripeDetails?
  stockPortfolios StockPortfolio[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Commented out until embedded types are available
// model StockPortfolioHeader {
//   id        String @id @default(cuid())
//   name      String
//   dataKey   String
//   width     Int @default(100)
//   frozen    Boolean @default(false)
//   resizable Boolean @default(true)
// }

model StockPortfolio {
  id             String                 @id @default(cuid())
  user           User                   @relation(fields: [userId], references: [id])
  userId         String
  name           String
  headers        String[]
  tickers        String[]
  settings       StockPortfolioSettings
  snapshots      Snapshot[]
  orders         Order[]
  latestSnapshot LatestSnapshot?
  buyingPower    Float                  @default(0)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@unique([userId, name])
}

model Position {
  id               String         @id @default(cuid())
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String
  ticker           String
  quantity         Int
  avgEntryPrice    Float
  costBasis        Float

  @@unique([stockPortfolioId, ticker])
}

enum OrderSide {
  Buy
  Sell
}

enum OrderType {
  Market
  Limit
  Stop
  StopLimit
}

enum OrderStatus {
  Open
  Closed
}

enum TimeInForce {
  Day
  GTC
  OPG
  CLS
  IOC
  FOK
}

model Order {
  id               String         @id @default(cuid())
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String
  ticker           String
  quantity         Int
  filledQuantity   Int?
  type             OrderType      @default(Market)
  side             OrderSide
  status           OrderStatus    @default(Open)
  limitPrice       Float?
  stopPrice        Float?
  avgFilledPrice   Float?
  timeInForce      TimeInForce    @default(Day)
  createdAt        DateTime       @default(now())
  filledAt         DateTime?
  cancelledAt      DateTime?
  failedAt         DateTime?
}

model StockPortfolioSettings {
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String         @id
  enableSnapshots  Boolean        @default(false)
}

model Balance {
  user    User   @relation(fields: [userId], references: [id])
  userId  String @id
  credits Int    @default(0)
}

enum TransactionStatus {
  FAILED
  PENDING
  SUCCEEDED
}

model Transaction {
  id                String            @id @default(cuid())
  user              User              @relation(fields: [userId], references: [id])
  userId            String
  creditsBefore     Int
  creditsTransacted Int
  createdAt         DateTime          @default(now())
  paymentIntentId   String?           @unique
  status            TransactionStatus @default(PENDING)
}

model StripeDetails {
  user       User   @relation(fields: [userId], references: [id])
  userId     String @id
  customerId String @unique
}

enum WebhookType {
  StockDataRetrieved
}

model Webhook {
  id               String         @id @default(cuid())
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String
  query            String?
  secret           String?
  type             WebhookType
  url              String
  timeout          Int            @default(10000)
  createdAt        DateTime       @default(now())
}

model Snapshot {
  id               String         @id @default(cuid())
  tickers          String[]
  headers          String[]
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String
  data             String[]
  createdAt        DateTime       @default(now())
}

// Each stock-portfolio tracks its latest data-fetch
model LatestSnapshot {
  snapshot         Snapshot       @relation(fields: [snapshotId], references: [id])
  snapshotId       String         @unique
  stockPortfolio   StockPortfolio @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String         @id
  updatedAt        DateTime       @updatedAt
}

enum Day {
  Mon
  Tues
  Wed
  Thurs
  Fri
  Sat
  Sun
}

enum Recurrence {
  Once
  Weekly
  Daily
}

model ScheduledEvent {
  id         String      @id @default(cuid())
  // The user that created this scheduled-event (uses their timezone data). If no user, then the
  // scheduled-event is a system-event, and should be executed in timezone = America/Los_Angeles
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  recurrence Recurrence?
  days       Day[]
  hour       Int         @default(0)
  minute     Int         @default(0)
  // Interval in minutes for min time till next execution
  interval   Int?
  next       DateTime    @default(now())
}

enum StockPortfolioEventType {
  DataRetrieved
}

model StockPortfolioEvent {
  scheduledEvent   ScheduledEvent          @relation(fields: [scheduledEventId], references: [id])
  scheduledEventId String                  @id
  type             StockPortfolioEventType
  stockPortfolio   StockPortfolio          @relation(fields: [stockPortfolioId], references: [id])
  stockPortfolioId String

  @@unique([stockPortfolioId, type])
}

enum OrderEventType {
  CloseExpiredOrders
  DeleteInvalidOrders
  ExecuteOpenOrders
}

model OrderEvent {
  scheduledEvent   ScheduledEvent @relation(fields: [scheduledEventId], references: [id])
  scheduledEventId String         @id
  type             OrderEventType @unique
}
