### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddressInput {
  city: String
  country: String
  line1: String!
  state: String
  zipcode: String
}

type Balance {
  credits: Int!
  user: User!
}

input BalanceWhereInput {
  AND: [BalanceWhereInput!]
  credits: IntFilter
  NOT: [BalanceWhereInput!]
  OR: [BalanceWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

input BalanceWhereUniqueInput {
  userId: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""The provider for the data provided by the data key"""
enum DataKey_Provider {
  """IEX Cloud (see `https://iexcloud.io/`)"""
  IEX_CLOUD
}

"""
A single data key option that can be selected for a stock portfolio header
"""
type DataKeyOption {
  """A unique data key for fetching stock portfolio data"""
  dataKey: String!

  """A more normal name. This can be shown to users."""
  name: String!

  """The name of the provider"""
  provider: DataKey_Provider!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum Day {
  Fri
  Mon
  Sat
  Sun
  Thurs
  Tues
  Wed
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type FeaturePricing {
  snapshot: FeaturePricingConfig!
}

type FeaturePricingConfig {
  price: Int!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LatestSnapshotFilter {
  every: LatestSnapshotWhereInput
  none: LatestSnapshotWhereInput
  some: LatestSnapshotWhereInput
}

input LatestSnapshotWhereInput {
  AND: [LatestSnapshotWhereInput!]
  NOT: [LatestSnapshotWhereInput!]
  OR: [LatestSnapshotWhereInput!]
  snapshot: SnapshotWhereInput
  snapshotId: StringFilter
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
  updatedAt: DateTimeFilter
}

input LoginLocalUserInput {
  """The user's decrypted password"""
  password: String!

  """The email or username (either) of the user"""
  userIdentifier: String!
}

"""Root mutation type"""
type Mutation implements RequestRoot {
  applySucceededTransaction(paymentIntentId: String!): Balance
  cancelOneOrder(where: OrderWhereUniqueInput!): Order
  cancelStripeSetupIntent(id: String!): StripeSetupIntent
  cancelTransaction(paymentIntentId: String!): Balance
  createOneOrder(data: OrderCreateInput!): Order!
  createOneStockPortfolio(data: StockPortfolioCreateInput!): StockPortfolio!
  createOneWebhook(data: WebhookCreateInput!): Webhook!
  createStripePaymentIntent(orderDetails: [OrderDetailInput!]!, paymentMethodId: String!): StripePaymentIntent
  createStripeSetupIntent: StripeSetupIntent
  deleteOneStockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio
  deleteOneStockPortfolioEvent(where: StockPortfolioEventWhereUniqueInput!): StockPortfolioEvent
  deleteOneWebhook(where: WebhookWhereUniqueInput!): Webhook

  """
  Mutation version of the query `stockData`. The `StockData` type inherently
  results in data mutations. As a result, this operation exists both as a query and mutation.
  """
  getStockData(where: StockDataWhereUniqueInput!): StockData

  """Logins in the user, and returns an expiring access token"""
  loginLocalUser(input: LoginLocalUserInput!): TokenPayload

  """Refreshes the currently logged-in user's access token"""
  refreshAccessToken(input: RefreshAccessTokenInput!): TokenPayload

  """Performs local auth registration (custom username + password)"""
  registerLocalUser(input: RegisterLocalUserInput!): RegisterLocalUserPayload

  """Resends the account verification email to the logged-in user"""
  resendVerifyEmail: ResendVerifyEmailPayload
  runScheduledEvent: RunScheduledEvent
  updateOneStockPortfolio(data: StockPortfolioUpdateInput!, where: StockPortfolioWhereUniqueInput!): StockPortfolio
  updateOneStockPortfolioSettings(data: StockPortfolioSettingsUpdateInput!, where: StockPortfolioSettingsWhereUniqueInput!): StockPortfolioSettings
  updateOneWebhook(data: WebhookUpdateInput!, where: WebhookWhereUniqueInput!): Webhook
  upsertOneStockPortfolioEvent(create: StockPortfolioEventCreateInput!, update: StockPortfolioEventUpdateInput!, where: StockPortfolioEventWhereUniqueInput!): StockPortfolioEvent!
  upsertOneWebhook(create: WebhookCreateInput!, update: WebhookUpdateInput!, where: WebhookWhereUniqueInput!): Webhook!

  """The viewer of this request"""
  viewer: User
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Order {
  avgFilledPrice: Float
  cancelledAt: DateTime
  createdAt: DateTime!
  failedAt: DateTime
  filledAt: DateTime
  id: String!
  limitPrice: Float
  quantity: Int!
  side: OrderSide!
  status: OrderStatus!
  stockPortfolio: StockPortfolio!
  stopPrice: Float
  ticker: String!
  timeInForce: TimeInForce!
  type: OrderType!
}

enum OrderByArg {
  asc
  desc
}

input OrderCreateInput {
  limitPrice: Float
  quantity: Int!
  side: OrderSide!
  stockPortfolio: StockPortfolioCreateOneWithoutOrderInput!
  stopPrice: Float
  ticker: String!
  timeInForce: TimeInForce
  type: OrderType
}

input OrderDetailInput {
  id: String!
  quantity: Int = 1
  type: OrderDetailType!
}

enum OrderDetailType {
  PriceBundle
}

input OrderEventFilter {
  every: OrderEventWhereInput
  none: OrderEventWhereInput
  some: OrderEventWhereInput
}

enum OrderEventType {
  CloseExpiredOrders
  DeleteInvalidOrders
  ExecuteOpenOrders
}

input OrderEventWhereInput {
  AND: [OrderEventWhereInput!]
  NOT: [OrderEventWhereInput!]
  OR: [OrderEventWhereInput!]
  scheduledEvent: ScheduledEventWhereInput
  scheduledEventId: StringFilter
  type: OrderEventType
}

input OrderFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  avgFilledPrice: OrderByArg
  cancelledAt: OrderByArg
  createdAt: OrderByArg
  failedAt: OrderByArg
  filledAt: OrderByArg
  limitPrice: OrderByArg
  quantity: OrderByArg
  side: OrderByArg
  status: OrderByArg
  stopPrice: OrderByArg
  ticker: OrderByArg
  timeInForce: OrderByArg
  type: OrderByArg
}

enum OrderSide {
  Buy
  Sell
}

enum OrderStatus {
  Closed
  Open
}

enum OrderType {
  Limit
  Market
  Stop
  StopLimit
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  avgFilledPrice: NullableFloatFilter
  cancelledAt: NullableDateTimeFilter
  createdAt: DateTimeFilter
  failedAt: NullableDateTimeFilter
  filledAt: NullableDateTimeFilter
  id: StringFilter
  limitPrice: NullableFloatFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  quantity: IntFilter
  side: OrderSide
  status: OrderStatus
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
  stopPrice: NullableFloatFilter
  ticker: StringFilter
  timeInForce: TimeInForce
  type: OrderType
}

input OrderWhereUniqueInput {
  id: String
}

type Position {
  avgEntryPrice: Float!
  costBasis: Float!
  id: String!
  quantity: Int!
  stockPortfolio: StockPortfolio!
  ticker: String!
}

input PositionFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  avgEntryPrice: FloatFilter
  costBasis: FloatFilter
  id: StringFilter
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  quantity: IntFilter
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
  ticker: StringFilter
}

type PriceBundle {
  credits: Int!
  id: String!
  price: Float!
}

"""Root query type"""
type Query implements RequestRoot {
  balance(where: BalanceWhereUniqueInput!): Balance

  """
  Retrieves the list of data key options for a stock portfolio header. All filters are 		OR'ed.
  """
  dataKeyOptions(
    """Filter by dataKey (partial works)"""
    dataKey: String

    """Filter by name (partial works)"""
    name: String

    """Filter by provider (partial works)"""
    provider: String
  ): [DataKeyOption!]!
  featurePricing: FeaturePricing!
  order(where: OrderWhereUniqueInput!): Order
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  priceBundles: [PriceBundle!]!
  snapshot(where: SnapshotWhereUniqueInput!): Snapshot
  snapshotCount(where: SnapshotWhereInput): Int!
  snapshots(cursor: SnapshotWhereUniqueInput, orderBy: SnapshotOrderByInput, skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!

  """
  Query version of the mutation `getStockData`. The `StockData` type inherently
  results in data mutations. As a result, this operation exists both as a query and mutation.
  """
  stockData(where: StockDataWhereUniqueInput!): StockData
  stockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio
  stockPortfolioCount(query: String, where: StockPortfolioWhereInput): Int
  stockPortfolioEvent(where: StockPortfolioEventWhereUniqueInput!): StockPortfolioEvent
  stockPortfolios(cursor: StockPortfolioWhereUniqueInput, orderBy: StockPortfolioOrderByInput, query: String, skip: Int, take: Int, where: StockPortfolioWhereInput): [StockPortfolio!]!
  stockSymbols(text: String!): [StockDataSearch!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(cursor: TransactionWhereUniqueInput, skip: Int, take: Int, where: TransactionWhereWithoutUserInput): [Transaction!]!

  """The viewer of this request"""
  viewer: User
  webhook(where: WebhookWhereUniqueInput!): Webhook
  webhookCount(where: WebhookWhereInput): Int!
  webhooks(cursor: WebhookWhereUniqueInput, orderBy: WebhookOrderByInput, skip: Int, take: Int, where: WebhookWhereInput): [Webhook!]!
}

enum Recurrence {
  Daily
  Once
  Weekly
}

input RefreshAccessTokenInput {
  """The refresh token, that is used to refresh the access token"""
  refreshToken: String!
}

input RegisterLocalUserInput {
  """(Unique) The user's email"""
  email: EmailAddress!

  """The user's decrypted password"""
  password: UserPassword!

  """(Unique) The user's username"""
  username: String!
}

"""The response object from a local register user request"""
type RegisterLocalUserPayload {
  """An error will be described if success is false"""
  error: String

  """Whether the registration successfully created a user or not"""
  success: Boolean!

  """The user object"""
  user: User
}

"""Common properties for Query, Mutation and Subscription types"""
interface RequestRoot {
  """The viewer of this request"""
  viewer: User
}

"""The response object from a resend verify email request"""
type ResendVerifyEmailPayload {
  """Status, on whether the email was successfully resent"""
  success: Boolean!
}

type RunScheduledEvent {
  """Update orders that are expired (no longer valid to be executed)"""
  closeExpiredOrders: Int!

  """
  Deletes invalid orders (e.g. limit-orders without a limit-price, or stop-orders without a stop-price)
  """
  deleteInvalidOrders: Int!
  executeOpenOrders: Int
  scheduledEvents: [ScheduledEvent!]!
  startTime: DateTime!

  """
  Retrieves stock-data for stock-portfolios that have polling configured, and generates snapshots for each one.
  """
  stockDataRetrieved: [StockPortfolioEvent!]
}

type ScheduledEvent {
  days: [Day!]!
  hour: Int!
  id: String!
  interval: Int
  minute: Int!
  next: DateTime!
  recurrence: Recurrence
  stockPortfolioEvent: StockPortfolioEvent
  user: User
}

input ScheduledEventCreatedaysInput {
  set: [Day!]
}

input ScheduledEventCreateOneWithoutStockPortfolioEventInput {
  create: ScheduledEventCreateWithoutStockPortfolioEventInput!
}

input ScheduledEventCreateWithoutStockPortfolioEventInput {
  days: ScheduledEventCreatedaysInput
  hour: Int = 0
  interval: Int
  minute: Int = 0
  recurrence: Recurrence
}

input ScheduledEventFilter {
  every: ScheduledEventWhereInput
  none: ScheduledEventWhereInput
  some: ScheduledEventWhereInput
}

input ScheduledEventUpdatedaysInput {
  set: [Day!]
}

input ScheduledEventUpdateOneRequiredWithoutStockPortfolioEventInput {
  update: ScheduledEventUpdateWithoutStockPortfolioEventDataInput!
}

input ScheduledEventUpdateWithoutStockPortfolioEventDataInput {
  days: ScheduledEventUpdatedaysInput
  hour: Int
  interval: Int
  minute: Int
  recurrence: Recurrence
}

input ScheduledEventWhereInput {
  AND: [ScheduledEventWhereInput!]
  hour: IntFilter
  id: StringFilter
  interval: NullableIntFilter
  minute: IntFilter
  next: DateTimeFilter
  NOT: [ScheduledEventWhereInput!]
  OR: [ScheduledEventWhereInput!]
  OrderEvent: OrderEventFilter
  recurrence: Recurrence
  StockPortfolioEvent: StockPortfolioEventFilter
  user: UserWhereInput
  userId: NullableStringFilter
}

type Snapshot {
  createdAt: DateTime!
  data: [JSONObject!]!
  headers: [SnapshotHeader!]!
  id: String!
  stockPortfolio: StockPortfolio!
  tickers: [String!]!
}

input SnapshotFilter {
  every: SnapshotWhereInput
  none: SnapshotWhereInput
  some: SnapshotWhereInput
}

type SnapshotHeader implements StockPortfolioDataHeader {
  dataKey: String!
  name: String!
}

input SnapshotOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  stockPortfolioId: OrderByArg
}

input SnapshotWhereInput {
  AND: [SnapshotWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  LatestSnapshot: LatestSnapshotFilter
  NOT: [SnapshotWhereInput!]
  OR: [SnapshotWhereInput!]
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
}

input SnapshotWhereUniqueInput {
  id: String
}

"""
The data for a stock-portfolio, derived from its headers and tickers. Accessing
the `data` prop of this type will incur a transaction for the `viewer` of this request
"""
type StockData {
  """
  The data for this stock-portfolio. Accessing this property incurs a transaction for the viewer of this request
  """
  data: [JSONObject!]

  """The amount in credits, that a data-refresh would cost"""
  refreshCost(enableSnapshots: Boolean): Int!

  """
  The stock portfolio for which this data is being generated for. If provided,
  				snapshots may be created depending on the stock-portfolio's settings.
  """
  stockPortfolio: StockPortfolio!
}

type StockDataSearch {
  exchange: String!
  region: String!
  securityName: String!
  securityType: String!
  symbol: String!
}

input StockDataWhereUniqueInput {
  stockPortfolioId: String!
}

"""StockPortfolio entity. This is what gets shown on the data grid"""
type StockPortfolio {
  buyingPower: Float!
  createdAt: DateTime!
  headers: [StockPortfolioHeader!]!
  id: String!
  latestSnapshot: Snapshot
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]!
  settings: StockPortfolioSettings!
  snapshots(cursor: SnapshotWhereUniqueInput, orderBy: SnapshotOrderByInput, skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!

  """The data that gets resolved based on headers and tickers"""
  stockData: StockData!
  tickers: [String!]!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input StockPortfolioCreateInput {
  name: String!
}

input StockPortfolioCreateOneWithoutOrderInput {
  connect: StockPortfolioWhereUniqueInput
}

input StockPortfolioCreateOneWithoutStockPortfolioEventInput {
  connect: StockPortfolioWhereUniqueInput!
}

input StockPortfolioCreateOneWithoutWebhookInput {
  connect: StockPortfolioWhereUniqueInput!
}

interface StockPortfolioDataHeader {
  dataKey: String!
  name: String!
}

type StockPortfolioEvent {
  scheduledEvent: ScheduledEvent!
  scheduledEventId: String!
  stockPortfolio: StockPortfolio!
  type: StockPortfolioEventType!
}

input StockPortfolioEventCreateInput {
  scheduledEvent: ScheduledEventCreateOneWithoutStockPortfolioEventInput!
  stockPortfolio: StockPortfolioCreateOneWithoutStockPortfolioEventInput!
  type: StockPortfolioEventType!
}

input StockPortfolioEventFilter {
  every: StockPortfolioEventWhereInput
  none: StockPortfolioEventWhereInput
  some: StockPortfolioEventWhereInput
}

enum StockPortfolioEventType {
  DataRetrieved
}

input StockPortfolioEventUpdateInput {
  scheduledEvent: ScheduledEventUpdateOneRequiredWithoutStockPortfolioEventInput
  type: StockPortfolioEventType
}

input StockPortfolioEventWhereInput {
  AND: [StockPortfolioEventWhereInput!]
  NOT: [StockPortfolioEventWhereInput!]
  OR: [StockPortfolioEventWhereInput!]
  scheduledEvent: ScheduledEventWhereInput
  scheduledEventId: StringFilter
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
  type: StockPortfolioEventType
}

input StockPortfolioEventWhereUniqueInput {
  scheduledEventId: String
  stockPortfolioId_type: StockPortfolioIdTypeCompoundUniqueInput
}

input StockPortfolioFilter {
  every: StockPortfolioWhereInput
  none: StockPortfolioWhereInput
  some: StockPortfolioWhereInput
}

type StockPortfolioHeader implements StockPortfolioDataHeader {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioHeaderInput {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioIdTypeCompoundUniqueInput {
  stockPortfolioId: String!
  type: StockPortfolioEventType!
}

input StockPortfolioOrderByInput {
  buyingPower: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

type StockPortfolioSettings {
  enableSnapshots: Boolean!
  stockPortfolio: StockPortfolio!
}

input StockPortfolioSettingsUpdateInput {
  """
  Whether snapshots should be saved per-data-refresh of this stock-portfolio
  """
  enableSnapshots: Boolean
}

input StockPortfolioSettingsWhereInput {
  AND: [StockPortfolioSettingsWhereInput!]
  enableSnapshots: BooleanFilter
  NOT: [StockPortfolioSettingsWhereInput!]
  OR: [StockPortfolioSettingsWhereInput!]
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
}

input StockPortfolioSettingsWhereUniqueInput {
  stockPortfolioId: String!
}

input StockPortfolioUpdateInput {
  headers: [StockPortfolioHeaderInput!]
  name: String
  tickers: [String!]
}

input StockPortfolioWhereInput {
  AND: [StockPortfolioWhereInput!]
  buyingPower: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  latestSnapshot: LatestSnapshotWhereInput
  name: StringFilter
  NOT: [StockPortfolioWhereInput!]
  OR: [StockPortfolioWhereInput!]
  orders: OrderFilter
  Position: PositionFilter
  settings: StockPortfolioSettingsWhereInput
  snapshots: SnapshotFilter
  StockPortfolioEvent: StockPortfolioEventFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
  Webhook: WebhookFilter
}

input StockPortfolioWhereUniqueInput {
  id: String
  userId_name: UserIdNameCompoundUniqueInput
}

input StockPortfolioWhereWithoutUserInput {
  AND: [StockPortfolioWhereWithoutUserInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [StockPortfolioWhereWithoutUserInput!]
  OR: [StockPortfolioWhereWithoutUserInput!]
  updatedAt: DateTimeFilter
  webhook: WebhookFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type StripeCard {
  brand: String!
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  last4: String!
}

input StripeDetailsWhereInput {
  AND: [StripeDetailsWhereInput!]
  customerId: StringFilter
  NOT: [StripeDetailsWhereInput!]
  OR: [StripeDetailsWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

type StripePaymentIntent {
  amount: Float
  client_secret: String
  created: Int!
  currency: String
  id: String!
  payment_method: StripePaymentMethod
}

type StripePaymentMethod {
  card: StripeCard
  created: Int!
  id: String!
}

type StripeSetupIntent {
  client_secret: String
  created: Int!
  id: String!
  payment_method: StripePaymentMethod
}

enum TimeInForce {
  CLS
  Day
  FOK
  GTC
  IOC
  OPG
}

"""The response from a successful login or token refresh request"""
type TokenPayload {
  """JSON web token to refresh the token"""
  refreshToken: String!

  """JSON web token to authenticate API requests"""
  token: String!
}

type Transaction {
  creditsBefore: Int!
  creditsTransacted: Int!
  id: String!
  paymentIntent: StripePaymentIntent
  paymentIntentId: String
  user: User!
}

input TransactionFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByInput {
  createdAt: OrderByArg
  creditsBefore: OrderByArg
  creditsTransacted: OrderByArg
}

enum TransactionStatus {
  FAILED
  PENDING
  SUCCEEDED
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  createdAt: DateTimeFilter
  creditsBefore: IntFilter
  creditsTransacted: IntFilter
  id: StringFilter
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  paymentIntentId: NullableStringFilter
  status: TransactionStatus
  user: UserWhereInput
  userId: StringFilter
}

input TransactionWhereUniqueInput {
  id: String
  paymentIntentId: String
}

input TransactionWhereWithoutUserInput {
  AND: [TransactionWhereWithoutUserInput!]
  createdAt: DateTimeFilter
  creditsBefore: IntFilter
  creditsTransacted: IntFilter
  id: StringFilter
  NOT: [TransactionWhereWithoutUserInput!]
  OR: [TransactionWhereWithoutUserInput!]
  paymentIntentId: NullableStringFilter
  status: TransactionStatus
}

"""Basic user of the application"""
type User {
  balance: Balance
  createdAt: DateTime!
  email: EmailAddress!
  emailVerified: Boolean!
  id: String!
  stockPortfolios(cursor: StockPortfolioWhereUniqueInput, skip: Int, take: Int): [StockPortfolio!]!
  timezone: String!
  updatedAt: DateTime!
  username: String!
}

input UserIdNameCompoundUniqueInput {
  name: String!
  userId: String!
}

"""The plain-text password of a user to be hashed"""
scalar UserPassword

input UserWhereInput {
  AND: [UserWhereInput!]
  balance: BalanceWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: BooleanFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  ScheduledEvent: ScheduledEventFilter
  stockPortfolios: StockPortfolioFilter
  stripeDetails: StripeDetailsWhereInput
  timezone: StringFilter
  Transaction: TransactionFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

type Webhook {
  createdAt: DateTime!
  id: String!
  query: String
  secret: String
  stockPortfolio: StockPortfolio!
  timeout: Int!
  type: WebhookType!
  url: String!
}

input WebhookCreateInput {
  query: String
  secret: String
  stockPortfolio: StockPortfolioCreateOneWithoutWebhookInput!
  timeout: Int
  type: WebhookType!
  url: String!
}

input WebhookFilter {
  every: WebhookWhereInput
  none: WebhookWhereInput
  some: WebhookWhereInput
}

input WebhookOrderByInput {
  createdAt: OrderByArg
}

enum WebhookType {
  StockDataRetrieved
}

input WebhookUpdateInput {
  query: String
  secret: String
  timeout: Int
  type: WebhookType
  url: String
}

input WebhookWhereInput {
  AND: [WebhookWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [WebhookWhereInput!]
  OR: [WebhookWhereInput!]
  stockPortfolio: StockPortfolioWhereWithoutUserInput
  stockPortfolioId: StringFilter
  timeout: IntFilter
  type: WebhookType
  url: StringFilter
}

input WebhookWhereUniqueInput {
  id: String
}
