### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input AddressInput {
  city: String
  country: String
  line1: String!
  state: String
  zipcode: String
}

type Balance {
  credits: Int!
  user: User!
}

input BalanceFilter {
  every: BalanceWhereInput
  none: BalanceWhereInput
  some: BalanceWhereInput
}

input BalanceWhereInput {
  AND: [BalanceWhereInput!]
  credits: IntFilter
  NOT: [BalanceWhereInput!]
  OR: [BalanceWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

input BalanceWhereUniqueInput {
  userId: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""The provider for the data provided by the data key"""
enum DataKey_Provider {
  """IEX Cloud (see `https://iexcloud.io/`)"""
  IEX_CLOUD
}

"""
A single data key option that can be selected for a stock portfolio header
"""
type DataKeyOption {
  """A unique data key for fetching stock portfolio data"""
  dataKey: String!

  """A more normal name. This can be shown to users."""
  name: String!

  """The name of the provider"""
  provider: DataKey_Provider!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginLocalUserInput {
  """The user's decrypted password"""
  password: String!

  """The email or username (either) of the user"""
  userIdentifier: String!
}

"""Root mutation type"""
type Mutation implements RequestRoot {
  applySucceededTransaction(paymentIntentId: String!): Balance
  cancelStripeSetupIntent(id: String!): StripeSetupIntent
  cancelTransaction(paymentIntentId: String!): Balance
  createOneStockPortfolio(data: StockPortfolioCreateInput!): StockPortfolio!
  createOneWebhook(data: WebhookCreateInput!): Webhook!
  createStripePaymentIntent(orderDetails: [OrderDetailInput!]!, paymentMethodId: String!): StripePaymentIntent
  createStripeSetupIntent: StripeSetupIntent
  deleteOneStockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio
  deleteOneWebhook(where: WebhookWhereUniqueInput!): Webhook

  """Logins in the user, and returns an expiring access token"""
  loginLocalUser(input: LoginLocalUserInput!): TokenPayload

  """Refreshes the currently logged-in user's access token"""
  refreshAccessToken(input: RefreshAccessTokenInput!): TokenPayload

  """Performs local auth registration (custom username + password)"""
  registerLocalUser(input: RegisterLocalUserInput!): RegisterLocalUserPayload

  """Resends the account verification email to the logged-in user"""
  resendVerifyEmail: ResendVerifyEmailPayload
  updateOneStockPortfolio(data: StockPortfolioUpdateInput!, where: StockPortfolioWhereUniqueInput!): StockPortfolio
  updateOneStockPortfolioSettings(data: StockPortfolioSettingsUpdateInput!, where: StockPortfolioSettingsWhereUniqueInput!): StockPortfolioSettings
  updateOneWebhook(data: WebhookUpdateInput!, where: WebhookWhereUniqueInput!): Webhook

  """The viewer of this request"""
  viewer: User
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

input OrderDetailInput {
  id: String!
  quantity: Int = 1
  type: OrderDetailType!
}

enum OrderDetailType {
  PriceBundle
}

type PriceBundle {
  credits: Int!
  id: String!
  price: Float!
}

"""Root query type"""
type Query implements RequestRoot {
  balance(where: BalanceWhereUniqueInput!): Balance

  """
  Retrieves the list of data key options for a stock portfolio header. All filters are 		OR'ed.
  """
  dataKeyOptions(
    """Filter by dataKey (partial works)"""
    dataKey: String

    """Filter by name (partial works)"""
    name: String

    """Filter by provider (partial works)"""
    provider: String
  ): [DataKeyOption!]!
  priceBundles: [PriceBundle!]!
  stockData(dataKeys: [String!]!, tickers: [String!]!): StockData
  stockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio
  stockPortfolioCount(query: String, where: StockPortfolioWhereInput): Int
  stockPortfolios(after: StockPortfolioWhereUniqueInput, before: StockPortfolioWhereUniqueInput, first: Int, last: Int, orderBy: StockPortfolioOrderByInput, query: String, skip: Int, where: StockPortfolioWhereInput): [StockPortfolio!]!
  stockSymbols(text: String!): [StockDataSearch!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int, skip: Int, where: TransactionWhereWithoutUserInput): [Transaction!]!

  """The viewer of this request"""
  viewer: User
  webhook(where: WebhookWhereUniqueInput!): Webhook
  webhookCount(where: WebhookWhereInput): Int!
  webhooks(after: WebhookWhereUniqueInput, before: WebhookWhereUniqueInput, first: Int, last: Int, orderBy: WebhookOrderByInput, skip: Int, where: WebhookWhereInput): [Webhook!]!
}

input RefreshAccessTokenInput {
  """The refresh token, that is used to refresh the access token"""
  refreshToken: String!
}

input RegisterLocalUserInput {
  """(Unique) The user's email"""
  email: EmailAddress!

  """The user's decrypted password"""
  password: UserPassword!

  """(Unique) The user's username"""
  username: String!
}

"""The response object from a local register user request"""
type RegisterLocalUserPayload {
  """An error will be described if success is false"""
  error: String

  """Whether the registration successfully created a user or not"""
  success: Boolean!

  """The user object"""
  user: User
}

"""Common properties for Query, Mutation and Subscription types"""
interface RequestRoot {
  """The viewer of this request"""
  viewer: User
}

"""The response object from a resend verify email request"""
type ResendVerifyEmailPayload {
  """Status, on whether the email was successfully resent"""
  success: Boolean!
}

type Snapshot {
  data: [JSONObject!]!
  headers: [SnapshotHeader!]!
  id: String!
  stockPortfolio: StockPortfolio!
  tickers: [String!]!
}

input SnapshotFilter {
  every: SnapshotWhereInput
  none: SnapshotWhereInput
  some: SnapshotWhereInput
}

type SnapshotHeader implements StockPortfolioDataHeader {
  dataKey: String!
  name: String!
}

input SnapshotWhereInput {
  AND: [SnapshotWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SnapshotWhereInput!]
  OR: [SnapshotWhereInput!]
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
}

type StockData {
  data: [JSONObject!]
  dataKeys: [String!]!

  """The amount in credits, that a data-refresh would cost"""
  refreshCost: Int!

  """
  The id of the stock-portfolio that this data is being generated for. If provided, 				snapshots may be created depending on the stock-portfolio's settings.
  """
  stockPortfolioId: String
  tickers: [String!]!
}

type StockDataSearch {
  exchange: String!
  region: String!
  securityName: String!
  securityType: String!
  symbol: String!
}

"""StockPortfolio entity. This is what gets shown on the data grid"""
type StockPortfolio {
  createdAt: DateTime!
  headers: [StockPortfolioHeader!]!
  id: String!
  name: String!
  settings: StockPortfolioSettings!
  snapshots: [Snapshot!]!

  """The data that gets resolved based on headers and tickers"""
  stockData: StockData!
  tickers: [String!]!
  updatedAt: DateTime!
  user: User!
}

input StockPortfolioCreateInput {
  name: String!
}

input StockPortfolioCreateOneWithoutWebhookInput {
  connect: StockPortfolioWhereUniqueInput!
}

interface StockPortfolioDataHeader {
  dataKey: String!
  name: String!
}

input StockPortfolioFilter {
  every: StockPortfolioWhereInput
  none: StockPortfolioWhereInput
  some: StockPortfolioWhereInput
}

type StockPortfolioHeader implements StockPortfolioDataHeader {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioHeaderInput {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioIdNameCompoundUniqueInput {
  name: String!
  stockPortfolioId: String!
}

input StockPortfolioOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

type StockPortfolioSettings {
  enableSnapshots: Boolean!
  pollInterval: Int!
  stockPortfolio: StockPortfolio!
}

input StockPortfolioSettingsUpdateInput {
  """
  Whether snapshots should be saved per-data-refresh of this stock-portfolio
  """
  enableSnapshots: Boolean

  """
  The time, in minutes, for when more data should be fetched for the stock-portfolio
  """
  pollInterval: Int
}

input StockPortfolioSettingsWhereInput {
  AND: [StockPortfolioSettingsWhereInput!]
  enableSnapshots: BooleanFilter
  NOT: [StockPortfolioSettingsWhereInput!]
  OR: [StockPortfolioSettingsWhereInput!]
  pollInterval: IntFilter
  stockPortfolio: StockPortfolioWhereInput
  stockPortfolioId: StringFilter
}

input StockPortfolioSettingsWhereUniqueInput {
  stockPortfolioId: String!
}

input StockPortfolioUpdateInput {
  headers: [StockPortfolioHeaderInput!]
  name: String
  tickers: [String!]
}

input StockPortfolioWhereInput {
  AND: [StockPortfolioWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [StockPortfolioWhereInput!]
  OR: [StockPortfolioWhereInput!]
  settings: StockPortfolioSettingsWhereInput
  snapshot: SnapshotFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
  webhook: WebhookFilter
}

input StockPortfolioWhereUniqueInput {
  id: String
  userId_name: UserIdNameCompoundUniqueInput
}

input StockPortfolioWhereWithoutUserInput {
  AND: [StockPortfolioWhereWithoutUserInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [StockPortfolioWhereWithoutUserInput!]
  OR: [StockPortfolioWhereWithoutUserInput!]
  updatedAt: DateTimeFilter
  webhook: WebhookFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type StripeCard {
  brand: String!
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  last4: String!
}

input StripeDetailsFilter {
  every: StripeDetailsWhereInput
  none: StripeDetailsWhereInput
  some: StripeDetailsWhereInput
}

input StripeDetailsWhereInput {
  AND: [StripeDetailsWhereInput!]
  customerId: StringFilter
  NOT: [StripeDetailsWhereInput!]
  OR: [StripeDetailsWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

type StripePaymentIntent {
  amount: Float
  client_secret: String
  created: Int!
  currency: String
  id: String!
  payment_method: StripePaymentMethod
}

type StripePaymentMethod {
  card: StripeCard
  created: Int!
  id: String!
}

type StripeSetupIntent {
  client_secret: String
  created: Int!
  id: String!
  payment_method: StripePaymentMethod
}

"""The response from a successful login or token refresh request"""
type TokenPayload {
  """JSON web token to refresh the token"""
  refreshToken: String!

  """JSON web token to authenticate API requests"""
  token: String!
}

type Transaction {
  creditsBefore: Int!
  creditsTransacted: Int!
  id: String!
  paymentIntent: StripePaymentIntent
  paymentIntentId: String
  user: User!
}

input TransactionFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByInput {
  createdAt: OrderByArg
  creditsBefore: OrderByArg
  creditsTransacted: OrderByArg
}

enum TransactionStatus {
  FAILED
  PENDING
  SUCCEEDED
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  createdAt: DateTimeFilter
  creditsBefore: IntFilter
  creditsTransacted: IntFilter
  id: StringFilter
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  paymentIntentId: NullableStringFilter
  status: TransactionStatus
  user: UserWhereInput
  userId: StringFilter
}

input TransactionWhereUniqueInput {
  id: String
  paymentIntentId: String
}

input TransactionWhereWithoutUserInput {
  AND: [TransactionWhereWithoutUserInput!]
  createdAt: DateTimeFilter
  creditsBefore: IntFilter
  creditsTransacted: IntFilter
  id: StringFilter
  NOT: [TransactionWhereWithoutUserInput!]
  OR: [TransactionWhereWithoutUserInput!]
  paymentIntentId: NullableStringFilter
  status: TransactionStatus
}

"""Basic user of the application"""
type User {
  balance: Balance
  createdAt: DateTime!
  email: EmailAddress!
  emailVerified: Boolean!
  id: String!
  updatedAt: DateTime!
  username: String!
}

input UserIdNameCompoundUniqueInput {
  name: String!
  userId: String!
}

"""The plain-text password of a user to be hashed"""
scalar UserPassword

input UserWhereInput {
  AND: [UserWhereInput!]
  balance: BalanceFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: BooleanFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  stockPortfolio: StockPortfolioFilter
  stripeDetails: StripeDetailsFilter
  transaction: TransactionFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

type Webhook {
  createdAt: DateTime!
  id: String!
  name: String!
  stockPortfolio: StockPortfolio!
  timeout: Int!
  type: WebhookType!
  url: String!
}

input WebhookCreateInput {
  name: String!
  stockPortfolio: StockPortfolioCreateOneWithoutWebhookInput!
  timeout: Int
  type: WebhookType!
  url: String!
}

input WebhookFilter {
  every: WebhookWhereInput
  none: WebhookWhereInput
  some: WebhookWhereInput
}

input WebhookOrderByInput {
  createdAt: OrderByArg
  name: OrderByArg
}

enum WebhookType {
  StockDataRetrieved
}

input WebhookUpdateInput {
  name: String
  timeout: Int
  type: WebhookType
  url: String
}

input WebhookWhereInput {
  AND: [WebhookWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [WebhookWhereInput!]
  OR: [WebhookWhereInput!]
  stockPortfolio: StockPortfolioWhereWithoutUserInput
  stockPortfolioId: StringFilter
  timeout: IntFilter
  type: WebhookType
  url: StringFilter
}

input WebhookWhereUniqueInput {
  id: String
  stockPortfolioId_name: StockPortfolioIdNameCompoundUniqueInput
}
