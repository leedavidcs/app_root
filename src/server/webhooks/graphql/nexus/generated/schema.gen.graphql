### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

enum OrderByArg {
  asc
  desc
}

"""Root query type"""
type Query {
  ok: Boolean!
  snapshot(where: SnapshotWhereUniqueInput!): Snapshot
  snapshots(after: SnapshotWhereUniqueInput, before: SnapshotWhereUniqueInput, first: Int, last: Int, orderBy: SnapshotOrderByInput, skip: Int, where: SnapshotWhereInput): [Snapshot!]!
  stockPortfolio(where: StockPortfolioWhereUniqueInput): StockPortfolio
  stockPortfolios(after: StockPortfolioWhereUniqueInput, before: StockPortfolioWhereUniqueInput, first: Int, last: Int, orderBy: StockPortfolioOrderByInput, skip: Int, where: StockPortfolioWhereInput): [StockPortfolio!]!
  webhookInfo: WebhookInfo!
}

type Snapshot {
  createdAt: DateTime!
  data: [JSONObject!]!
  headers: [SnapshotHeader!]!
  id: String!
  stockPortfolio: StockPortfolio!
  tickers: [String!]!
}

type SnapshotHeader {
  dataKey: String
  name: String!
}

input SnapshotOrderByInput {
  createdAt: OrderByArg
}

input SnapshotWhereInput {
  AND: [SnapshotWhereInput!]
  createdAt: DateTimeFilter
  NOT: [SnapshotWhereInput!]
  OR: [SnapshotWhereInput!]
  stockPortfolio: StockPortfolioWhereInput
}

input SnapshotWhereUniqueInput {
  id: String
}

type StockPortfolio {
  createdAt: DateTime!
  headers: [StockPortfolioHeader!]!
  id: String!
  name: String!
  tickers: [String!]!
  updatedAt: DateTime!
}

type StockPortfolioHeader {
  dataKey: String
  name: String!
}

input StockPortfolioOrderByInput {
  createdAt: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input StockPortfolioWhereInput {
  AND: [StockPortfolioWhereInput!]
  createdAt: DateTimeFilter
  name: StringFilter
  NOT: [StockPortfolioWhereInput!]
  OR: [StockPortfolioWhereInput!]
  updatedAt: DateTimeFilter
}

input StockPortfolioWhereUniqueInput {
  id: String
  name: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: String
  notIn: [String!]
  startsWith: String
}

type Webhook {
  id: String!
  query: String
  stockPortfolio: StockPortfolio!
  type: WebhookType!
  url: String!
}

type WebhookInfo {
  calledAt: DateTime!
  webhook: Webhook!
}

enum WebhookType {
  StockDataRetrieved
}
